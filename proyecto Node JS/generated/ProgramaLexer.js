// Generated from Programa.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,19,149,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,
5,15,110,8,15,10,15,12,15,113,9,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,121,
8,16,10,16,12,16,124,9,16,1,17,4,17,127,8,17,11,17,12,17,128,1,17,1,17,4,
17,133,8,17,11,17,12,17,134,3,17,137,8,17,1,18,1,18,1,19,1,19,1,20,4,20,
144,8,20,11,20,12,20,145,1,20,1,20,0,0,21,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,
0,41,19,1,0,4,2,0,34,34,92,92,2,0,65,90,97,122,1,0,48,57,3,0,9,10,13,13,
32,32,155,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
1,0,0,0,0,35,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,52,1,0,0,0,5,61,1,0,0,0,
7,74,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,89,1,0,0,0,17,91,
1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,97,1,0,0,0,25,99,1,0,0,0,27,101,1,
0,0,0,29,103,1,0,0,0,31,105,1,0,0,0,33,116,1,0,0,0,35,126,1,0,0,0,37,138,
1,0,0,0,39,140,1,0,0,0,41,143,1,0,0,0,43,44,5,112,0,0,44,45,5,114,0,0,45,
46,5,111,0,0,46,47,5,103,0,0,47,48,5,114,0,0,48,49,5,97,0,0,49,50,5,109,
0,0,50,51,5,97,0,0,51,2,1,0,0,0,52,53,5,112,0,0,53,54,5,114,0,0,54,55,5,
111,0,0,55,56,5,99,0,0,56,57,5,101,0,0,57,58,5,115,0,0,58,59,5,97,0,0,59,
60,5,114,0,0,60,4,1,0,0,0,61,62,5,109,0,0,62,63,5,97,0,0,63,64,5,110,0,0,
64,65,5,101,0,0,65,66,5,106,0,0,66,67,5,97,0,0,67,68,5,114,0,0,68,69,5,69,
0,0,69,70,5,114,0,0,70,71,5,114,0,0,71,72,5,111,0,0,72,73,5,114,0,0,73,6,
1,0,0,0,74,75,5,105,0,0,75,76,5,109,0,0,76,77,5,112,0,0,77,78,5,114,0,0,
78,79,5,105,0,0,79,80,5,109,0,0,80,81,5,105,0,0,81,82,5,114,0,0,82,8,1,0,
0,0,83,84,5,61,0,0,84,10,1,0,0,0,85,86,5,59,0,0,86,12,1,0,0,0,87,88,5,123,
0,0,88,14,1,0,0,0,89,90,5,125,0,0,90,16,1,0,0,0,91,92,5,40,0,0,92,18,1,0,
0,0,93,94,5,41,0,0,94,20,1,0,0,0,95,96,5,46,0,0,96,22,1,0,0,0,97,98,5,43,
0,0,98,24,1,0,0,0,99,100,5,45,0,0,100,26,1,0,0,0,101,102,5,42,0,0,102,28,
1,0,0,0,103,104,5,47,0,0,104,30,1,0,0,0,105,111,5,34,0,0,106,110,8,0,0,0,
107,108,5,92,0,0,108,110,9,0,0,0,109,106,1,0,0,0,109,107,1,0,0,0,110,113,
1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,
114,115,5,34,0,0,115,32,1,0,0,0,116,122,3,37,18,0,117,121,3,37,18,0,118,
121,3,39,19,0,119,121,5,95,0,0,120,117,1,0,0,0,120,118,1,0,0,0,120,119,1,
0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,34,1,0,0,0,124,
122,1,0,0,0,125,127,3,39,19,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,
0,0,0,128,129,1,0,0,0,129,136,1,0,0,0,130,132,3,21,10,0,131,133,3,39,19,
0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,
1,0,0,0,136,130,1,0,0,0,136,137,1,0,0,0,137,36,1,0,0,0,138,139,7,1,0,0,139,
38,1,0,0,0,140,141,7,2,0,0,141,40,1,0,0,0,142,144,7,3,0,0,143,142,1,0,0,
0,144,145,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,
6,20,0,0,148,42,1,0,0,0,9,0,109,111,120,122,128,134,136,145,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ProgramaLexer extends antlr4.Lexer {

    static grammarFileName = "Programa.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'programa'", "'procesar'", "'manejarError'", 
                         "'imprimir'", "'='", "';'", "'{'", "'}'", "'('", 
                         "')'", "'.'", "'+'", "'-'", "'*'", "'/'" ];
	static symbolicNames = [ null, "PROGRAMA", "PROCESAR", "MANEJARERROR", 
                          "IMPRIMIR", "ASIGNACION", "PUNTOYCOMA", "LLAVE_IZQ", 
                          "LLAVE_DER", "PAREN_IZQ", "PAREN_DER", "PUNTO", 
                          "SUMA", "RESTA", "MULTIPLICA", "DIVIDE", "CADENA", 
                          "IDENTIFICADOR", "NUMERO", "ESPACIOS" ];
	static ruleNames = [ "PROGRAMA", "PROCESAR", "MANEJARERROR", "IMPRIMIR", 
                      "ASIGNACION", "PUNTOYCOMA", "LLAVE_IZQ", "LLAVE_DER", 
                      "PAREN_IZQ", "PAREN_DER", "PUNTO", "SUMA", "RESTA", 
                      "MULTIPLICA", "DIVIDE", "CADENA", "IDENTIFICADOR", 
                      "NUMERO", "LETRA", "DIGITO", "ESPACIOS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ProgramaLexer.EOF = antlr4.Token.EOF;
ProgramaLexer.PROGRAMA = 1;
ProgramaLexer.PROCESAR = 2;
ProgramaLexer.MANEJARERROR = 3;
ProgramaLexer.IMPRIMIR = 4;
ProgramaLexer.ASIGNACION = 5;
ProgramaLexer.PUNTOYCOMA = 6;
ProgramaLexer.LLAVE_IZQ = 7;
ProgramaLexer.LLAVE_DER = 8;
ProgramaLexer.PAREN_IZQ = 9;
ProgramaLexer.PAREN_DER = 10;
ProgramaLexer.PUNTO = 11;
ProgramaLexer.SUMA = 12;
ProgramaLexer.RESTA = 13;
ProgramaLexer.MULTIPLICA = 14;
ProgramaLexer.DIVIDE = 15;
ProgramaLexer.CADENA = 16;
ProgramaLexer.IDENTIFICADOR = 17;
ProgramaLexer.NUMERO = 18;
ProgramaLexer.ESPACIOS = 19;



